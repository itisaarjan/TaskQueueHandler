name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'service/**'
      - '.github/workflows/docker-build-push.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'service/**'
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: emailservice
            dockerfile: service/EmailService/Dockerfile
            context: .
            port: 8004
          - name: queueservice
            dockerfile: service/QueueService/Dockerfile
            context: .
            port: 8001
          - name: imageworker
            dockerfile: service/ImageWorker/Dockerfile
            context: .
            port: 8003
          - name: taskqueue
            dockerfile: service/task-queue/Dockerfile
            context: .
            port: 8000
          - name: taskdbservice
            dockerfile: service/TaskDBService/Dockerfile
            context: .
            port: 8002

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service.name }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build-and-push.outputs.digest }}"

  summary:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build completed for all services!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services Built:" >> $GITHUB_STEP_SUMMARY
          echo "- EmailService (Port 8004)" >> $GITHUB_STEP_SUMMARY
          echo "- QueueService (Port 8001)" >> $GITHUB_STEP_SUMMARY
          echo "- ImageWorker (Port 8003)" >> $GITHUB_STEP_SUMMARY
          echo "- TaskQueue (Port 8000)" >> $GITHUB_STEP_SUMMARY
          echo "- TaskDBService (Port 8002)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Hub:" >> $GITHUB_STEP_SUMMARY
          echo "Images available at: https://hub.docker.com/u/${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_STEP_SUMMARY

